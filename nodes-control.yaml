## AHL
---
- name: Setup control nodes to run Ansible playbooks (as root).
  become: yes
  gather_facts: yes

  hosts: control_nodes

  tasks:
    - name: Uninstall the legacy Kubernetes apt GPG key.
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: absent
      when: cleanup_k8s_apt is defined

    - name: Uninstall the legacy Kubernetes apt repository.
      ansible.builtin.apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: absent
      when: cleanup_k8s_apt is defined

    - name: Get the Kubernetes package key.
      shell: curl -fsSL {{ k8s_url_apt_key }} | gpg --dearmor -o {{ k8s_gpgpath }}
      args:
        creates: "{{ k8s_gpgpath }}"

    - name: Install the Kubernetes repository.
      apt_repository:
        filename: kubernetes
        repo: "deb [signed-by={{ k8s_gpgpath }}] {{ k8s_repository }} /"

    - name: Install required dependencies.
      ansible.builtin.apt:
        pkg:
          - kubectl
          - sshpass
        state: latest
        update_cache: true

    - name: Install required Python modules.
      ansible.builtin.pip:
        name: 
          - kubernetes
          - jmespath
          - netaddr

    - import_role: 
        name: private_key

- name: Fetch the remote kubectl config to localhost.
  become: no
  gather_facts: yes

  hosts: localhost

  tasks:
    - name: Create a local directoty for the kubectl config.
      ansible.builtin.file:
        path: "{{ control_copy_kubectl_dir }}"
        state: directory
      when: "'k3s_nodes_master' in groups and groups['k3s_nodes_master']"

    - name: Fetch kubectl config from a master node.
      ansible.builtin.fetch:
        src: /root/.kube/config
        dest: "{{ control_copy_kubectl_dir }}/config"
        flat: yes
        owner: "{{ control_user }}"
        group: "{{ control_user }}"
      become: yes
      delegate_to: "{{ groups['k3s_nodes_master'][0] }}"
      when: "'k3s_nodes_master' in groups and groups['k3s_nodes_master']"

- name: Setup control nodes to run Ansible playbooks (as control user).
  become: no
  gather_facts: yes

  hosts: control_nodes
  
  tasks:
    - name: Create a local directoty for the kubectl config.
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
      when: "'k3s_nodes_master' in groups and groups['k3s_nodes_master']"

    - name: Copy the kubectl config.
      ansible.builtin.copy:
        src: "{{ control_copy_kubectl_dir }}/config"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ control_user }}"
        group: "{{ control_user }}"
      when: "'k3s_nodes_master' in groups and groups['k3s_nodes_master']"

    - name: Create an Ansibile config file.
      ansible.builtin.template:
        src: ansible.cfg.j2
        dest: "{{ ansible_env.HOME }}/.ansible.cfg"

    - name: Install Ansible.
      ansible.builtin.pip:
        name: ansible
        extra_args: --user

    - name: Add host keys for all managed nodes to known hosts.
      ansible.builtin.known_hosts:
        name: "{{ hostvars[item].ansible_host }}"
        key: "{{ lookup('pipe', 'ssh-keyscan {{ hostvars[item].ansible_host }},`dig +short {{ hostvars[item].ansible_host }}`') }}"
      with_items: "{{ groups['managed_nodes'] }}"

    - name: Check out Ansible playbooks from GitHub.
      ansible.builtin.git:
        repo: "https://github.com/allan-lewis/allans-home-lab.git"
        dest: "{{ ansible_env.HOME }}/allans-home-lab"

    - name: Install Tailscale Ansible role.
      shell: "{{ ansible_env.HOME }}/.local/bin/ansible-galaxy role install artis3n.tailscale"

    - name: Install the Docker Community Ansible collection.
      shell: "{{ ansible_env.HOME }}/.local/bin/ansible-galaxy collection install community.docker"
