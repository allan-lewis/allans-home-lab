- name: Ensure that node is using New York time zone
  community.general.timezone:
    name: America/New_York

- name: Ensure that {{ control_user }} user exists
  ansible.builtin.user:
    name: "{{ control_user }}"
    password: "{{ control_password }}"
    password_lock: no
    shell: /bin/bash
    groups:
      - sudo
    append: yes
    state: present
  register: control_user_data

- name: Ensure {{ control_user }} user has an SSH folder
  ansible.builtin.file:
    path: "{{ control_user_data.home }}/.ssh"
    state: directory
    owner: "{{ control_user }}"
    group: "{{ control_user }}"

- name: Ensure that {{ control_user }} user has an SSH key
  community.crypto.openssh_keypair:
    path: "{{ control_user_data.home }}/.ssh/id_rsa"
    owner: "{{ control_user }}"
    group: "{{ control_user }}"

- name: Ensure that control node SSH keys are authorized
  ansible.posix.authorized_key:
    user: "{{ control_user }}"
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Ensure that the {{ control_user }} user is in the sudoers file
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: '^{{ control_user }}'
    line: '{{ control_user }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Ensure that we're controlling things as the {{ control_user }} user
  ansible.builtin.assert:
    that: "ansible_ssh_user == '{{ control_user }}'"
    fail_msg: "Not proceeding further since we're using user {{ ansible_ssh_user }} instead of {{ control_user }}"
    success_msg: "Proceeding because we're using user {{ ansible_ssh_user }}"

- name: Ensure that managed node is ping-able
  ansible.builtin.ping:

- name: Ensure that only the {{ control_user }}  user can login
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^AllowUsers'
    line: 'AllowUsers {{ control_user }}'
    state: present
  register: ssh_allow_users

- name: Ensure that root login access is disabled
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?PermitRootLogin \w*$'
    line: 'PermitRootLogin no'
    state: present
  register: ssh_disable_root

- name: Disable SSH password authentication
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^#?\s*PasswordAuthentication\s'
    line: 'PasswordAuthentication no'
    state: present
  register: ssh_disable_password

- name: Ensure that the SSH service has been restarted, if necessary
  ansible.builtin.service:
    name: sshd
    state: restarted
  when: (ssh_allow_users is changed) or (ssh_disable_root is changed) or (ssh_disable_password is changed)

- name: Do an apt update
  ansible.builtin.apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

- name: Do an apt upgrade
  ansible.builtin.apt: upgrade=dist force_apt_get=yes

- name: Check if a reboot is required
  ansible.builtin.stat: 
    path: /var/run/reboot-required
    get_md5: no
  register: reboot_required_file

- name: Ensure that a reboot has been performed, if necessary
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists

- name: Ensure that all required dependencies are present
  ansible.builtin.apt:
    pkg:
      - net-tools
      - nfs-common
    state: latest
    update_cache: true

- name: Create mount points
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ control_user }}"
    group: "{{ control_user }}"
  with_items: "{{ mounts }}"

- name: Mount the NFS volumes
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    fstype: nfs
    opts: resvport,rw
    state: mounted
  with_items: "{{ mounts }}"
