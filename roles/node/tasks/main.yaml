## AHL
---
- name: Set the time zone to New York.
  community.general.timezone:
    name: America/New_York

- name: Create the control user.
  ansible.builtin.user:
    name: "{{ control_user }}"
    password: "!"
    password_lock: no
    shell: /bin/bash
    groups:
      - sudo
    append: yes
    state: present
  register: control_user_data

- name: Create the control user's SSH folder.
  ansible.builtin.file:
    path: "{{ control_user_data.home }}/.ssh"
    state: directory
    owner: "{{ control_user }}"
    group: "{{ control_user }}"

- name: Create the control user's SSH key.
  community.crypto.openssh_keypair:
    path: "{{ control_user_data.home }}/.ssh/id_rsa"
    owner: "{{ control_user }}"
    group: "{{ control_user }}"

- name: Add SSH key(s) to authorized keys.
  ansible.posix.authorized_key:
    user: "{{ control_user }}"
    state: present
    key: "{{ lookup('file', '{{ item.path }}') }}"
  with_items: "{{ authorized_ssh_keys }}"

- name: Add the control user to the sudoers list.
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: '^{{ control_user }}'
    line: '{{ control_user }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Stop the playbook if not running as the control user.
  ansible.builtin.assert:
    that: "ansible_ssh_user == '{{ control_user }}'"
    fail_msg: "Not proceeding further since we're using user {{ ansible_ssh_user }} instead of {{ control_user }}"
    success_msg: "Proceeding because we're using user {{ ansible_ssh_user }}"

- name: Allow only the control user to login.
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^AllowUsers'
    line: 'AllowUsers {{ control_user }}'
    state: present
  register: ssh_allow_users

- name: Disable root login access.
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?PermitRootLogin \w*$'
    line: 'PermitRootLogin no'
    state: present
  register: ssh_disable_root

- name: Disable SSH password authentication.
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^#?\s*PasswordAuthentication\s'
    line: 'PasswordAuthentication no'
    state: present
  register: ssh_disable_password

- name: Update SSH host key algorithms.
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    search_string: 'HostKeyAlgorithms'
    line: 'HostKeyAlgorithms +ssh-rsa'
    state: present
  when: ansible_facts['distribution'] == 'Ubuntu'
  register: ssh_host_key

- name: Update SSH public key accepted algorithms.
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    search_string: 'PubkeyAcceptedAlgorithms'
    line: 'PubkeyAcceptedAlgorithms +ssh-rsa'
    state: present
  when: ansible_facts['distribution'] == 'Ubuntu'
  register: ssh_pub_key

- name: Restart the SSH service.
  ansible.builtin.service:
    name: sshd
    state: restarted
  when: (ssh_allow_users is changed) or (ssh_disable_root is changed) or (ssh_disable_password is changed) or (ssh_host_key is changed) or (ssh_pub_key is changed)

- name: Perform an apt update.
  ansible.builtin.apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

- name: Perform an apt upgrade.
  ansible.builtin.apt: upgrade=dist force_apt_get=yes

- name: Install required dependencies.
  ansible.builtin.apt:
    pkg:
      - net-tools
      - nfs-common
      - python3-pip
    state: latest
    update_cache: true

- name: Create a configuration file for rsync.
  ansible.builtin.template:
    src: rsyncd.conf.j2
    dest: /etc/rsyncd.conf
  when: "rsync_modules is defined"
  with_items: "{{ rsync_modules }}"
  register: wrote_rsync_config

- name: Restart the rsync service.
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: rsync
  when: wrote_rsync_config is changed

- name: Check to see if a reboot is required.
  ansible.builtin.stat: 
    path: /var/run/reboot-required
    get_md5: no
  register: reboot_required_file

- name: Perform a reboot.
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists
