## AHL
---
- name: Check for completion file existence from previous install.
  ansible.builtin.stat:
    path: "{{ talos_completion_file }}"
  register: cluster_exists

- name: Display the result of the completion file check.
  ansible.builtin.debug:
    var: cluster_exists

- name: Abort setup if a previous cluster exists and we're not being forced to replace it.
  ansible.builtin.assert:
    that: "not cluster_exists.stat.exists or (ahl_talos_replace is defined and ahl_talos_replace == 'yes')"
    fail_msg: "Aborting install. File {{ talos_completion_file }} exists. Set 'ahl_talos_replace' to 'yes' to replace the existing cluster."
    success_msg: "Proceeding with cluster creation."

- name: Create config archive directory.
  ansible.builtin.file:
    path: "{{ talos_archive_dir }}"
    state: directory

- name: Archive previous configuration.
  community.general.archive:
    path: 
      - "{{ talos_config_dir }}"
      - "{{ talos_kube_dir }}"
    dest: "{{ talos_archive_dir }}/talos-cluster-{{ ansible_date_time.epoch }}.tgz"

- name: Cleanup configs from previous installation.
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ talos_completion_file }}"
    - "{{ talos_config_dir }}"
    - "{{ talos_kube_dir }}"

- name: Create config directories.
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ talos_config_dir }}"
    - "{{ talos_patch_directory }}"
    - "{{ talos_kube_dir }}"

- name: Write patch files for all nodes.
  ansible.builtin.template:
    src: "talos-node-patch.yaml.j2"
    dest: "{{ talos_patch_directory }}/{{ item }}.yaml"
  with_items: "{{ groups['talos_nodes'] }}"

- name: Generate cluster configs.
  ansible.builtin.command: talosctl gen config {{ talos_cluster | default('talos-cluster') }} https://{{ hostvars[talos_first_node].ansible_host }}:6443 --output-dir {{ talos_config_dir }} --install-image {{ talos_image }}
  changed_when: true

- name: Apply machine configs to all nodes (including patches).
  ansible.builtin.command: talosctl apply-config --insecure --nodes {{ hostvars[item].ephemeral_host }} --file ~/.talos/controlplane.yaml --config-patch @{{ talos_patch_directory }}/{{ item }}.yaml
  with_items: "{{ groups['talos_nodes'] }}"
  changed_when: true

- name: Configure the first Talos endpoint.
  ansible.builtin.command: talosctl config endpoint {{ hostvars[talos_first_node].ansible_host }} --talosconfig {{ talos_config_file }}
  changed_when: true

- name: Configure the first Talos node.
  ansible.builtin.command: talosctl config node {{ hostvars[talos_first_node].ansible_host }} --talosconfig {{ talos_config_file }}
  changed_when: true

- name: Bootstrap Talos cluster.
  ansible.builtin.command:
    cmd: "talosctl bootstrap --talosconfig {{ talos_config_file }}"
  register: bootstrap_result
  retries: 10
  delay: 30
  until: bootstrap_result.rc == 0
  changed_when: bootstrap_result.rc == 0

- name: Get kube config.
  ansible.builtin.command: talosctl kubeconfig {{ talos_kube_dir }}/config --talosconfig {{ talos_config_file }}
  changed_when: true

- name: Create the completion file.
  ansible.builtin.file:
    path: "{{ talos_completion_file }}"
    state: touch
